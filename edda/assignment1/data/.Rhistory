Pi=matrix(nrow=N+1,ncol=T)
Q=c()
V[,T]=0
for(t in (T-1):1){
for(x in 0:N){
for(a in max(d-x,0):(N-x+d)){
# Q[a+1]=x*h+K*(a>0)+V[x-d+a+1,t+1]
Q[a+1]=(S*t/1000) - P + ( ( t/1000 ) * V[ x+a-d, t+1 ] + (1-t/1000) * V[ x+a, t+1 ] )
}
V[x+1,t]=Q[max(d-x,0)+1]
Pi[x+1,t]=max(d-x,0)
for(a in max(d-x,0):(N-x+d))
if(Q[a+1]<V[x+1,t]){
Pi[x+1,t]=a
V[x+1,t]=Q[a+1]
}
}
}
Pi[,1]
# value function of exercise 1.2
T=1000
N=100
d=1;h=1;K=20;S=20;P=10
V=matrix(nrow=N+1,ncol=T)
Pi=matrix(nrow=N+1,ncol=T)
Q=c()
V[,T]=0
for(t in (T-1):1){
for(x in 0:N){
for(a in max(d-x,0):(N-x+d)){
# Q[a+1]=x*h+K*(a>0)+V[x-d+a+1,t+1]
Q[a+1]=(S*t/1000) - P + ( ( t/1000 ) * V[ x+a-d+1, t+1 ] + (1-t/1000) * V[ x+a+1, t+1 ] )
}
V[x+1,t]=Q[max(d-x,0)+1]
Pi[x+1,t]=max(d-x,0)
for(a in max(d-x,0):(N-x+d))
if(Q[a+1]<V[x+1,t]){
Pi[x+1,t]=a
V[x+1,t]=Q[a+1]
}
}
}
Pi[,1]
# value function of exercise 1.2
T=1000
N=500
d=1;h=1;K=20;S=20;P=10
V=matrix(nrow=N+1,ncol=T)
Pi=matrix(nrow=N+1,ncol=T)
Q=c()
V[,T]=0
for(t in (T-1):1){
for(x in 0:N){
for(a in max(d-x,0):(N-x+d)){
# Q[a+1]=x*h+K*(a>0)+V[x-d+a+1,t+1]
Q[a+1]=(S*t/1000) - P + ( ( t/1000 ) * V[ x+a-d+1, t+1 ] + (1-t/1000) * V[ x+a+1, t+1 ] )
}
V[x+1,t]=Q[max(d-x,0)+1]
Pi[x+1,t]=max(d-x,0)
for(a in max(d-x,0):(N-x+d))
if(Q[a+1]<V[x+1,t]){
Pi[x+1,t]=a
V[x+1,t]=Q[a+1]
}
}
}
# value function of exercise 1.2
T=1000
N=500
d=1;h=1;K=20;S=20;P=10
V=matrix(nrow=N+1,ncol=T)
Pi=matrix(nrow=N+1,ncol=T)
Q=c()
V[,T]=0
for(t in (T-1):1){
for(x in 0:N){
for(a in max(d-x,0):(N-x+d)){
# Q[a+1]=x*h+K*(a>0)+V[x-d+a+1,t+1]
Q[a+1]=(S*t/1000) - P + ( ( t/1000 ) * V[ x+a-d, t+1 ] + (1-t/1000) * V[ x+a, t+1 ] )
}
V[x+1,t]=Q[max(d-x,0)+1]
Pi[x+1,t]=max(d-x,0)
for(a in max(d-x,0):(N-x+d))
if(Q[a+1]<V[x+1,t]){
Pi[x+1,t]=a
V[x+1,t]=Q[a+1]
}
}
}
# value function of exercise 1.2
T=1000
N=500
d=1;h=1;K=20;S=20;P=10
V=matrix(nrow=N+1,ncol=T)
Pi=matrix(nrow=N+1,ncol=T)
Q=c()
V[,T]=0
for(t in (T-1):1){
for(x in 0:N){
for(a in max(d-x,0):(N-x+d)){
# Q[a+1]=x*h+K*(a>0)+V[x-d+a+1,t+1]
Q[a+1]=(S*t/1000) - P + ( ( t/1000 ) * V[ x-d+a, t+1 ] + (1-t/1000) * V[ x+a, t+1 ] )
}
V[x+1,t]=Q[max(d-x,0)+1]
Pi[x+1,t]=max(d-x,0)
for(a in max(d-x,0):(N-x+d))
if(Q[a+1]<V[x+1,t]){
Pi[x+1,t]=a
V[x+1,t]=Q[a+1]
}
}
}
# value function of exercise 1.2
T=1000
N=500
d=1;h=1;K=20;S=20;P=10
V=matrix(nrow=N+1,ncol=T)
Pi=matrix(nrow=N+1,ncol=T)
Q=c()
V[,T]=0
for(t in (T-1):1){
for(x in 0:N){
for(a in max(d-x,0):(N-x+d)){
# Q[a+1]=x*h+K*(a>0)+V[x-d+a+1,t+1]
Q[a+1]=(S*t/1000) - P + ( ( t/1000 ) * V[ x-d+a+1, t+1 ] + (1-t/1000) * V[ x+a+1, t+1 ] )
}
V[x+1,t]=Q[max(d-x,0)+1]
Pi[x+1,t]=max(d-x,0)
for(a in max(d-x,0):(N-x+d))
if(Q[a+1]<V[x+1,t]){
Pi[x+1,t]=a
V[x+1,t]=Q[a+1]
}
}
}
# value function of exercise 1.2
T=1000
N=10
d=1;h=1;K=20;S=20;P=10
V=matrix(nrow=N+1,ncol=T)
Pi=matrix(nrow=N+1,ncol=T)
Q=c()
V[,T]=0
for(t in (T-1):1){
for(x in 0:N){
for(a in max(d-x,0):(N-x+d)){
# Q[a+1]=x*h+K*(a>0)+V[x-d+a+1,t+1]
print(x, a)
Q[a+1]=(S*t/1000) - P + ( ( t/1000 ) * V[ x-d+a+1, t+1 ] + (1-t/1000) * V[ x+a+1, t+1 ] )
}
V[x+1,t]=Q[max(d-x,0)+1]
Pi[x+1,t]=max(d-x,0)
for(a in max(d-x,0):(N-x+d))
if(Q[a+1]<V[x+1,t]){
Pi[x+1,t]=a
V[x+1,t]=Q[a+1]
}
}
}
# value function of exercise 1.2
T=1000
N=10
d=1;h=1;K=20;S=20;P=10
V=matrix(nrow=N+1,ncol=T)
Pi=matrix(nrow=N+1,ncol=T)
Q=c()
V[,T]=0
for(t in (T-1):1){
for(x in 0:N){
for(a in max(d-x,0):(N-x+d)){
# Q[a+1]=x*h+K*(a>0)+V[x-d+a+1,t+1]
print(x)
print(a)
Q[a+1]=(S*t/1000) - P + ( ( t/1000 ) * V[ x-d+a+1, t+1 ] + (1-t/1000) * V[ x+a+1, t+1 ] )
}
V[x+1,t]=Q[max(d-x,0)+1]
Pi[x+1,t]=max(d-x,0)
for(a in max(d-x,0):(N-x+d))
if(Q[a+1]<V[x+1,t]){
Pi[x+1,t]=a
V[x+1,t]=Q[a+1]
}
}
}
# value function of exercise 1.2
T=1000
N=10
d=1;h=1;K=20;S=20;P=10
V=matrix(nrow=N+1,ncol=T)
Pi=matrix(nrow=N+1,ncol=T)
Q=c()
V[,T]=0
for(t in (T-1):1){
for(x in 0:N){
for(a in max(d-x,0):(N-x+d)){
# Q[a+1]=x*h+K*(a>0)+V[x-d+a+1,t+1]
print(x)
print(a)
Q[a+1]=(S*t/1000) - P + ( ( t/1000 ) * V[ x-d+a+1, t+1 ] + (1-t/1000) * V[ x+a, t+1 ] )
}
V[x+1,t]=Q[max(d-x,0)+1]
Pi[x+1,t]=max(d-x,0)
for(a in max(d-x,0):(N-x+d))
if(Q[a+1]<V[x+1,t]){
Pi[x+1,t]=a
V[x+1,t]=Q[a+1]
}
}
}
# value function of exercise 1.2
T=1000
N=10
d=1;h=1;K=20;S=20;P=10
V=matrix(nrow=N+1,ncol=T)
Pi=matrix(nrow=N+1,ncol=T)
Q=c()
V[,T]=0
for(t in (T-1):1){
for(x in 0:N){
for(a in max(d-x,0):(N-x+d)){
# Q[a+1]=x*h+K*(a>0)+V[x-d+a+1,t+1]
Q[a+1]=(S*t/1000) - P + ( ( t/1000 ) * V[ x-d+a+1, t+1 ] + (1-t/1000) * V[ x+a, t+1 ] )
}
V[x+1,t]=Q[max(d-x,0)+1]
Pi[x+1,t]=max(d-x,0)
for(a in max(d-x,0):(N-x+d))
if(Q[a+1]<V[x+1,t]){
Pi[x+1,t]=a
V[x+1,t]=Q[a+1]
}
}
}
Pi[ , 1]
# value function of exercise 1.2
T=1000
N=100
d=1;h=1;K=20;S=20;P=10
V=matrix(nrow=N+1,ncol=T)
Pi=matrix(nrow=N+1,ncol=T)
Q=c()
V[,T]=0
for(t in (T-1):1){
for(x in 0:N){
for(a in max(d-x,0):(N-x+d)){
# Q[a+1]=x*h+K*(a>0)+V[x-d+a+1,t+1]
Q[a+1]=(S*t/1000) - P + ( ( t/1000 ) * V[ x-d+a+1, t+1 ] + (1-t/1000) * V[ x+a, t+1 ] )
}
V[x+1,t]=Q[max(d-x,0)+1]
Pi[x+1,t]=max(d-x,0)
for(a in max(d-x,0):(N-x+d))
if(Q[a+1]<V[x+1,t]){
Pi[x+1,t]=a
V[x+1,t]=Q[a+1]
}
}
}
Pi[,1]
# value function of exercise 1.2
T=1000
N=100
d=1;h=1;K=20;S=20;P=10
V=matrix(nrow=N+1,ncol=T)
Pi=matrix(nrow=N+1,ncol=T)
Q=c()
V[,T]=0
for(t in (T-1):1){
for(x in 0:N){
for(a in max(d-x,0):(N-x+d)){
Q[a+1]=x*h+K*(a>0)+V[x-d+a+1,t+1]
#Q[a+1]=(S*t/1000) - P + ( ( t/1000 ) * V[ x-d+a+1, t+1 ] + (1-t/1000) * V[ x+a, t+1 ] )
}
V[x+1,t]=Q[max(d-x,0)+1]
Pi[x+1,t]=max(d-x,0)
for(a in max(d-x,0):(N-x+d))
if(Q[a+1]<V[x+1,t]){
Pi[x+1,t]=a
V[x+1,t]=Q[a+1]
}
}
}
Pi[,1]
View(Pi)
# value function of exercise 1.2
T=1000
N=100
d=5;h=1;K=20;S=20;P=10
V=matrix(nrow=N+1,ncol=T)
Pi=matrix(nrow=N+1,ncol=T)
Q=c()
V[,T]=0
for(t in (T-1):1){
for(x in 0:N){
for(a in max(d-x,0):(N-x+d)){
Q[a+1]=x*h+K*(a>0)+V[x-d+a+1,t+1]
#Q[a+1]=(S*t/1000) - P + ( ( t/1000 ) * V[ x-d+a+1, t+1 ] + (1-t/1000) * V[ x+a, t+1 ] )
}
V[x+1,t]=Q[max(d-x,0)+1]
Pi[x+1,t]=max(d-x,0)
for(a in max(d-x,0):(N-x+d))
if(Q[a+1]<V[x+1,t]){
Pi[x+1,t]=a
V[x+1,t]=Q[a+1]
}
}
}
Pi[,1]
View(Pi)
# value function of exercise 1.2
T=1000
N=100
d=5;h=1;K=20;S=20;P=10
V=matrix(nrow=N+1,ncol=T)
Pi=matrix(nrow=N+1,ncol=T)
Q=c()
V[,T]=0
for(t in (T-1):1){
for(x in 0:N){
for(a in max(d-x,0):(N-x+d)){
#Q[a+1]=x*h+K*(a>0)+V[x-d+a+1,t+1]
Q[a+1]=(S*t/1000) - P + ( ( t/1000 ) * V[ x-d+a+1, t+1 ] + (1-t/1000) * V[ x+a+1, t+1 ] )
}
V[x+1,t]=Q[max(d-x,0)+1]
Pi[x+1,t]=max(d-x,0)
for(a in max(d-x,0):(N-x+d))
if(Q[a+1]<V[x+1,t]){
Pi[x+1,t]=a
V[x+1,t]=Q[a+1]
}
}
}
Pi[,1]
# value function of exercise 1.2
T=1000
N=100
d=5;h=1;K=20;S=20;P=10
V=matrix(nrow=N+1,ncol=T)
Pi=matrix(nrow=N+1,ncol=T)
Q=c()
V[,T]=0
for(t in (T-1):1){
for(x in 0:N){
for(a in max(d-x,0):(N-x+d)){
Q[a+1]=x*h+K*(a>0)+V[x-d+a+1,t+1]
#Q[a+1]=(S*t/1000) - P + ( ( t/1000 ) * V[ x-d+a+1, t+1 ] + (1-t/1000) * V[ x+a+1, t+1 ] )
}
V[x+1,t]=Q[max(d-x,0)+1]
Pi[x+1,t]=max(d-x,0)
for(a in max(d-x,0):(N-x+d))
if(Q[a+1]<V[x+1,t]){
Pi[x+1,t]=a
V[x+1,t]=Q[a+1]
}
}
}
Pi[,1]
View(Pi)
T=1000
N=100
d=5;h=1;K=20;S=20;P=10
V=matrix(nrow=N+1,ncol=T)
Pi=matrix(nrow=N+1,ncol=T)
Q=c()
V[,T]=0
for(t in (T-1):1){
for(x in 0:N){
for(a in max(d-x,0):(N-x+d)){
Q[a+1]=x*h+K*(a>0)+V[x-d+a+1,t+1]
#Q[a+1]=(S*t/1000) - P + ( ( t/1000 ) * V[ x-d+a+1, t+1 ] + (1-t/1000) * V[ x+a+1, t+1 ] )
}
V[x+1,t]=Q[max(d-x,0)+1]
Pi[x+1,t]=max(d-x,0)
for(a in max(d-x,0):(N-x+d))
if(Q[a+1]<V[x+1,t]){
Pi[x+1,t]=a
V[x+1,t]=Q[a+1]
}
}
}
Pi[,1]
a
for (x in 0:4) { print(x) }
}
for (x in 0:4) { print(x) }
# value function of exercise 1.2
T=1000
N=100
d=20;h=1;K=20
V=matrix(nrow=N+1,ncol=T)
Pi=matrix(nrow=N+1,ncol=T)
Q=c()
V[,T]=0
for(t in (T-1):1){
for(x in 0:N){
for(a in max(d-x,0):(N-x+d)){
Q[a+1]=x*h+K*(a>0)+V[x-d+a+1,t+1]
}
V[x+1,t]=Q[max(d-x,0)+1]
Pi[x+1,t]=max(d-x,0)
for(a in max(d-x,0):(N-x+d))
if(Q[a+1]<V[x+1,t]){
Pi[x+1,t]=a
V[x+1,t]=Q[a+1]
}
}
}
Pi[,1]
mu=nu=0; t=numeric(100000)
for (i in 1:100000) {
x=rnorm(50, mu, 1); y=rnorm(50, nu, 1)
}
abs(t) >= abs(-2.4339)
sum(abs(t) >= abs(-2.4339))
sum(abs(t) >= abs(-2.4339)) / length(t)
for (i in 1:100000) {
x=rnorm(50, mu, 1); y=rnorm(50, nu, 1)
t[i] = t.test(x,y)[[1]]
}
abs(t) >= abs(-2.4339)
sum(abs(t) >= abs(-2.4339))
sum(abs(t) >= abs(-2.4339)) / length(t)
# a) Generate two samples of sizes 100 and 100000 from a standard normal distribution.
# Make histograms and compute the means and standard deviations of the samples.
n100 = rnorm(100)
n100000 = rnorm(100000)
?hist
# Make histograms and compute the means and standard deviations of the samples.
# hist for n100
hist(n100)
# hist for n100000
hist(n100000)
# mean for n100
mean100 = mean(n100)
# mean for n100000
mean100000 = mean(n100000)
# std for n100
sd(n100)
# std for n100000
sd(n100000)
sum(n100 < 2) / length(n100)
# that it is bigger then −0.5 and
sum(n100 > -0.5) / length(n100)
# b) For a standard normal distribution, compute the following 3 probabilities:
# that an arbitrary outcome is smaller than 2,
# sum(n100 < 2) / length(n100)
pnorm(2)
options(digits=3)
# that it is bigger then −0.5 and >> P(Z > -0.5)
# sum(n100 > -0.5) / length(n100)
1 - pnorm(-0.5)
# that it is between −1 and 2. >> P(-1 < Z < 2)
pnorm(2) - 1 + pnorm(-1)
# that it is between −1 and 2. >> P(-1 < Z < 2)
pnorm(2) - pnorm(-1)
sum(n100 < 2 & n100 > -1) / length(n100)
# d) Repeat a and b for a normal distribution with mean=3 and sd=2. Find also the value such that 95%
# of the outcomes is smaller than that value.
sample = rnorm(100, mean = 3, sd = 2)
qnorm(0.95, mean = 3, sd = 2)
# e) Any normal variable X ∼ N(μ,σ2) can be generated from a standard normally distributed Z ∼ N(0,1)
# as X = μ + σZ. Generate in this way a sample of size 1000 from a normal distribution with
# e) Any normal variable X ∼ N(μ,σ2) can be generated from a standard normally distributed Z ∼ N(0,1)
# as X = μ + σZ. Generate in this way a sample of size 1000 from a normal distribution with
# μ = −10 and σ = 5, and verify that the sample mean and standard deviation are close to the true values μ and σ
sample = rnorm(1000)
X = -10 + 5 * sample
hist(X)
# p-value generator
p.value = function(n, m, mu, nu, sd, B=1000){
# initialize p array
p = numeric(length = B)
# 1000 sample loop
for (b in 1:B) {
# generate x and y
x = rnorm(n, mean = mu, sd = sd); y = rnorm(m, mean = nu, sd = sd)
p[b] = t.test(x, y)[[3]]
}
return(p)
}
## H0 -> mu=nu
## H1 -> two sided
# a) Set n=m=30, mu=180 and sd=5.
n = m = 30; mu = 180; sd = 5
# Calculate now the power of the t-test for every value of nu in the grid seq(175,185,by=0.25).
nu = seq(175, 185, by=0.25)
# set p value vector for every nu trial
p = numeric(length = length(nu))
# t-test for every nu
for (i in length(nu)) {
p[i] = p.value(n, m, mu, nu[i], sd)
}
?rbind
?rep
# Randomization in R
# N: number of observations
I=4; J=2; N=3
rep(1:I, each=N*J)
sample(1:(N*I*J))
rbind(rep(1:I, each=(N*J)),
rep(1:J, each=(N*I)),
sample(1:I*J*N))
data = rbind(rep(1:I, each=(N*J)),
rep(1:J, each=(N*I)),
sample(1:I*J*N))
attach(data)
peniccilin
data(penicillin.data)
data(penicillin.data)
?data
data(penicillin)
setwd("~/Documents/R/VU/edda/assignment1/data")
ashina = read.table('ashina.txt', header = TRUE)
View(ashina)
