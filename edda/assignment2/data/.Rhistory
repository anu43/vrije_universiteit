Pi[x+1,t]=a
V[x+1,t]=Q[a+1]
}
}
}
Pi[,1]
View(Pi)
# value function of exercise 1.2
T=1000
N=100
d=5;h=1;K=20;S=20;P=10
V=matrix(nrow=N+1,ncol=T)
Pi=matrix(nrow=N+1,ncol=T)
Q=c()
V[,T]=0
for(t in (T-1):1){
for(x in 0:N){
for(a in max(d-x,0):(N-x+d)){
Q[a+1]=x*h+K*(a>0)+V[x-d+a+1,t+1]
#Q[a+1]=(S*t/1000) - P + ( ( t/1000 ) * V[ x-d+a+1, t+1 ] + (1-t/1000) * V[ x+a, t+1 ] )
}
V[x+1,t]=Q[max(d-x,0)+1]
Pi[x+1,t]=max(d-x,0)
for(a in max(d-x,0):(N-x+d))
if(Q[a+1]<V[x+1,t]){
Pi[x+1,t]=a
V[x+1,t]=Q[a+1]
}
}
}
Pi[,1]
View(Pi)
# value function of exercise 1.2
T=1000
N=100
d=5;h=1;K=20;S=20;P=10
V=matrix(nrow=N+1,ncol=T)
Pi=matrix(nrow=N+1,ncol=T)
Q=c()
V[,T]=0
for(t in (T-1):1){
for(x in 0:N){
for(a in max(d-x,0):(N-x+d)){
#Q[a+1]=x*h+K*(a>0)+V[x-d+a+1,t+1]
Q[a+1]=(S*t/1000) - P + ( ( t/1000 ) * V[ x-d+a+1, t+1 ] + (1-t/1000) * V[ x+a+1, t+1 ] )
}
V[x+1,t]=Q[max(d-x,0)+1]
Pi[x+1,t]=max(d-x,0)
for(a in max(d-x,0):(N-x+d))
if(Q[a+1]<V[x+1,t]){
Pi[x+1,t]=a
V[x+1,t]=Q[a+1]
}
}
}
Pi[,1]
# value function of exercise 1.2
T=1000
N=100
d=5;h=1;K=20;S=20;P=10
V=matrix(nrow=N+1,ncol=T)
Pi=matrix(nrow=N+1,ncol=T)
Q=c()
V[,T]=0
for(t in (T-1):1){
for(x in 0:N){
for(a in max(d-x,0):(N-x+d)){
Q[a+1]=x*h+K*(a>0)+V[x-d+a+1,t+1]
#Q[a+1]=(S*t/1000) - P + ( ( t/1000 ) * V[ x-d+a+1, t+1 ] + (1-t/1000) * V[ x+a+1, t+1 ] )
}
V[x+1,t]=Q[max(d-x,0)+1]
Pi[x+1,t]=max(d-x,0)
for(a in max(d-x,0):(N-x+d))
if(Q[a+1]<V[x+1,t]){
Pi[x+1,t]=a
V[x+1,t]=Q[a+1]
}
}
}
Pi[,1]
View(Pi)
T=1000
N=100
d=5;h=1;K=20;S=20;P=10
V=matrix(nrow=N+1,ncol=T)
Pi=matrix(nrow=N+1,ncol=T)
Q=c()
V[,T]=0
for(t in (T-1):1){
for(x in 0:N){
for(a in max(d-x,0):(N-x+d)){
Q[a+1]=x*h+K*(a>0)+V[x-d+a+1,t+1]
#Q[a+1]=(S*t/1000) - P + ( ( t/1000 ) * V[ x-d+a+1, t+1 ] + (1-t/1000) * V[ x+a+1, t+1 ] )
}
V[x+1,t]=Q[max(d-x,0)+1]
Pi[x+1,t]=max(d-x,0)
for(a in max(d-x,0):(N-x+d))
if(Q[a+1]<V[x+1,t]){
Pi[x+1,t]=a
V[x+1,t]=Q[a+1]
}
}
}
Pi[,1]
a
for (x in 0:4) { print(x) }
}
for (x in 0:4) { print(x) }
# value function of exercise 1.2
T=1000
N=100
d=20;h=1;K=20
V=matrix(nrow=N+1,ncol=T)
Pi=matrix(nrow=N+1,ncol=T)
Q=c()
V[,T]=0
for(t in (T-1):1){
for(x in 0:N){
for(a in max(d-x,0):(N-x+d)){
Q[a+1]=x*h+K*(a>0)+V[x-d+a+1,t+1]
}
V[x+1,t]=Q[max(d-x,0)+1]
Pi[x+1,t]=max(d-x,0)
for(a in max(d-x,0):(N-x+d))
if(Q[a+1]<V[x+1,t]){
Pi[x+1,t]=a
V[x+1,t]=Q[a+1]
}
}
}
Pi[,1]
mu=nu=0; t=numeric(100000)
for (i in 1:100000) {
x=rnorm(50, mu, 1); y=rnorm(50, nu, 1)
}
abs(t) >= abs(-2.4339)
sum(abs(t) >= abs(-2.4339))
sum(abs(t) >= abs(-2.4339)) / length(t)
for (i in 1:100000) {
x=rnorm(50, mu, 1); y=rnorm(50, nu, 1)
t[i] = t.test(x,y)[[1]]
}
abs(t) >= abs(-2.4339)
sum(abs(t) >= abs(-2.4339))
sum(abs(t) >= abs(-2.4339)) / length(t)
# a) Generate two samples of sizes 100 and 100000 from a standard normal distribution.
# Make histograms and compute the means and standard deviations of the samples.
n100 = rnorm(100)
n100000 = rnorm(100000)
?hist
# Make histograms and compute the means and standard deviations of the samples.
# hist for n100
hist(n100)
# hist for n100000
hist(n100000)
# mean for n100
mean100 = mean(n100)
# mean for n100000
mean100000 = mean(n100000)
# std for n100
sd(n100)
# std for n100000
sd(n100000)
sum(n100 < 2) / length(n100)
# that it is bigger then −0.5 and
sum(n100 > -0.5) / length(n100)
# b) For a standard normal distribution, compute the following 3 probabilities:
# that an arbitrary outcome is smaller than 2,
# sum(n100 < 2) / length(n100)
pnorm(2)
options(digits=3)
# that it is bigger then −0.5 and >> P(Z > -0.5)
# sum(n100 > -0.5) / length(n100)
1 - pnorm(-0.5)
# that it is between −1 and 2. >> P(-1 < Z < 2)
pnorm(2) - 1 + pnorm(-1)
# that it is between −1 and 2. >> P(-1 < Z < 2)
pnorm(2) - pnorm(-1)
sum(n100 < 2 & n100 > -1) / length(n100)
# d) Repeat a and b for a normal distribution with mean=3 and sd=2. Find also the value such that 95%
# of the outcomes is smaller than that value.
sample = rnorm(100, mean = 3, sd = 2)
qnorm(0.95, mean = 3, sd = 2)
# e) Any normal variable X ∼ N(μ,σ2) can be generated from a standard normally distributed Z ∼ N(0,1)
# as X = μ + σZ. Generate in this way a sample of size 1000 from a normal distribution with
# e) Any normal variable X ∼ N(μ,σ2) can be generated from a standard normally distributed Z ∼ N(0,1)
# as X = μ + σZ. Generate in this way a sample of size 1000 from a normal distribution with
# μ = −10 and σ = 5, and verify that the sample mean and standard deviation are close to the true values μ and σ
sample = rnorm(1000)
X = -10 + 5 * sample
hist(X)
# p-value generator
p.value = function(n, m, mu, nu, sd, B=1000){
# initialize p array
p = numeric(length = B)
# 1000 sample loop
for (b in 1:B) {
# generate x and y
x = rnorm(n, mean = mu, sd = sd); y = rnorm(m, mean = nu, sd = sd)
p[b] = t.test(x, y)[[3]]
}
return(p)
}
## H0 -> mu=nu
## H1 -> two sided
# a) Set n=m=30, mu=180 and sd=5.
n = m = 30; mu = 180; sd = 5
# Calculate now the power of the t-test for every value of nu in the grid seq(175,185,by=0.25).
nu = seq(175, 185, by=0.25)
# set p value vector for every nu trial
p = numeric(length = length(nu))
# t-test for every nu
for (i in length(nu)) {
p[i] = p.value(n, m, mu, nu[i], sd)
}
dimnames = list(c("A","B","C","D-F"),
c("Psychology","Biology","Other"))
grades=matrix(c(8,15,13,14,19,15,15,4,7,3,1,4),
byrow=TRUE,ncol=3,nrow=4, dimnames=dimnames)
graades
grades
rowsums=apply(grades,1,sum); colsums=apply(grades,2,sum)
rowsums
colsums
total=sum(grades); expected=(rowsums%*%t(colsums))/total
total
chisq.test(grades, simulate.p.value = TRUE)
z = chisq.test(grades, simulate.p.value = TRUE)
View(z)
z[["stdres"]]
data = matrix(data=c(1,0,0,0,0,7, 5,6,8,8,5,8), nrow=6)
colnames(data) = c("handful", "bag")
rownames(data) = c("red", "yellow", "orange", "green", "brown", "blue")
data
fisher.test(data)
?fisher.test
fisher.test(data, simulate.p.value = TRUE)
setwd("~/Documents/python/VU/github/vrije_universiteit/edda/assignment2")
setwd("~/Documents/python/VU/github/vrije_universiteit/edda/assignment2/data")
knitr::opts_chunk$set(fig.height = 2.5)
bread = read.table(file = 'bread.txt', header = TRUE)
setwd("~/Documents/python/VU/github/vrije_universiteit/edda/assignment2/data")
read.table('bread.txt')
bread = read.table(file = 'bread.txt', header = TRUE)
bread = read.table(file = 'data/bread.txt', header = TRUE)
View(bread)
View(bread)
hours = bread$hours
# Set I and J as the levels[environment, humidity]
rbind(rep(c('cold', 'intermediate', 'warm'), each=6),
rep(c('dry','wet',), each=9),
sample(hours))
hours = bread$hours
# Set I and J as the levels[environment, humidity]
rbind(rep(c('cold', 'intermediate', 'warm'), each=6),
rep(c('dry','wet'), each=9),
sample(hours))
hours = bread$hours
# The randomization process for 18 slices
randomization = rbind(rep(c('cold', 'intermediate', 'warm'), each=6),
rep(c('dry','wet'), each=9),
sample(hours))
# Converting to data frame
data.frame(randomization)
data.frame(randomization)$X1
# Converting to data frame
data.frame(randomization).T
?rbind
hours = as.vector(as.matrix(bread$hours))
# The randomization process for 18 slices
randomization = rbind(rep(c('cold', 'intermediate', 'warm'), each=6),
rep(c('dry','wet'), each=9),
sample(hours))
# Converting to data frame
data.frame(randomization)
hours
# The randomization process for 18 slices
environment = as.factor(rep(c('cold', 'intermediate', 'warm'), each = 6))
# The randomization process for 18 slices
# Take hours column from the data
hours = as.vector(as.matrix(bread$hours))
# Create environment column
environment = as.factor(rep(c('cold', 'intermediate', 'warm'), each = 6))
# Create humidity column
humidity = as.factor(c('dry', 'wet'), each = 9)
# The randomization process for 18 slices
# Take hours column from the data
hours = as.vector(as.matrix(bread$hours))
# Create environment column
environment = as.factor(rep(c('cold', 'intermediate', 'warm'), each = 6))
# Create humidity column
humidity = as.factor(rep(c('dry', 'wet'), each = 9))
# Converting to data frame
data.frame(cbind(hours, environment, humidity))
environment
# The randomization process for 18 slices
# Take hours column from the data
hours = as.vector(as.matrix(bread$hours))
# Create environment column
environment = as.factor(rep(c('cold', 'intermediate', 'warm'), each = 6))
# Create humidity column
humidity = as.factor(rep(c('dry', 'wet'), each = 9))
# Converting to data frame
data.frame(rbind(hours, environment, humidity))
# The randomization process for 18 slices
# Take hours column from the data
hours = as.vector(as.matrix(bread$hours))
# Create environment column
environment = as.factor(rep(c('cold', 'intermediate', 'warm'), each = 6))
# Create humidity column
humidity = as.factor(rep(c('dry', 'wet'), each = 9))
# Converting to data frame
data.frame(cbind(hours, environment, humidity))
# The randomization process for 18 slices
# Take hours column from the data
hours = as.vector(as.matrix(bread$hours))
# Create environment column
environment = rep(c('cold', 'intermediate', 'warm'), each = 6)
# Create humidity column
humidity = rep(c('dry', 'wet'), each = 9)
# Converting to data frame
data.frame(cbind(hours, environment, humidity))
boxplot(hours~environment+humiditym, data = bread)
boxplot(hours~environment+humidity, data = bread)
boxplot(hours~environment*humidity, data = bread)
boxplot(hours~environment, data = bread)
par(mfrow=c(1, 2))
boxplot(hours~environment, data = bread); boxplot(hours~humidity, data = bread)
# Divide into two columns
par(mfrow=c(1, 2))
# Boxplot of hours~environment and hours~humidity
boxplot(hours~environment, data = bread); boxplot(hours~humidity, data = bread)
# Interaction plot of hours~environment and hours~humidity
interaction.plot(hours, environment)
# Divide into two columns
par(mfrow=c(1, 2))
# Boxplot of hours~environment and hours~humidity
boxplot(hours~environment, data = bread); boxplot(hours~humidity, data = bread)
# Interaction plot of hours~environment and hours~humidity
interaction.plot(hours, environment, data = bread)
# Divide into two columns
par(mfrow=c(1, 2))
# Boxplot of hours~environment and hours~humidity
boxplot(hours~environment, data = bread); boxplot(hours~humidity, data = bread)
# Interaction plot of hours~environment and hours~humidity
interaction.plot(bread$hours, bread$environment)
# Divide into two columns
par(mfrow=c(1, 2))
attach(bread)
# Boxplot of hours~environment and hours~humidity
boxplot(hours~environment, data = bread); boxplot(hours~humidity, data = bread)
# Interaction plot of hours~environment and hours~humidity
interaction.plot(bread$hours, bread$environment)
interaction.plot(hours, environment)
# Interaction plot of hours~environment and hours~humidity
interaction.plot(x.factor = hours, trace.factor = environment)
bread
interaction.plot(bread$hours, bread$humidity)
# Divide into two columns
par(mfrow=c(1, 2))
# Boxplot of hours~environment and hours~humidity
boxplot(hours~environment, data = bread); boxplot(hours~humidity, data = bread)
# Interaction plot of hours~environment and hours~humidity
interaction.plot(environment, response = hours)
# Divide into two columns
par(mfrow=c(1, 2))
# Boxplot of hours~environment and hours~humidity
boxplot(hours~environment, data = bread); boxplot(hours~humidity, data = bread)
# Interaction plot of hours~environment and hours~humidity
interaction.plot(environment, humidity, hours)
# Divide into two columns
par(mfrow=c(1, 2))
# Boxplot of hours~environment and hours~humidity
boxplot(hours~environment, data = bread); boxplot(hours~humidity, data = bread)
# Interaction plot of hours~environment and hours~humidity
interaction.plot(environment, humidity, hours)
interaction.plot(humidity, environment, hours)
interaction.plot(humidity, environment, hours)
?interaction.plot
# Divide into two columns
par(mfrow=c(1, 2))
# Boxplot of hours~environment and hours~humidity
boxplot(hours~environment, data = bread); boxplot(hours~humidity, data = bread)
# Interaction plot of hours~environment and hours~humidity
interaction.plot(environment, humidity, hours, fixed = TRUE)
interaction.plot(humidity, environment, hours, fixed = TRUE)
# Divide into two columns
par(mfrow=c(1, 2))
# Boxplot of hours~environment and hours~humidity
boxplot(hours~environment, data = bread); boxplot(hours~humidity, data = bread)
# Interaction plot of hours~environment and hours~humidity
interaction.plot(environment, humidity, hours, fixed = TRUE)
interaction.plot(humidity, environment, hours, fixed = TRUE)
# Divide into two columns
par(mfrow=c(1, 2))
# Boxplot of hours~environment and hours~humidity
boxplot(hours~environment, data = bread)
interaction.plot(environment, humidity, hours, fixed = TRUE)
# Interaction plot of hours~environment and hours~humidity
boxplot(hours~humidity, data = bread)
interaction.plot(humidity, environment, hours, fixed = TRUE)
?lm
# Creating linear model and ANOVA test
breadaov = lm(hours~environment*humidity, data = bread); anova(breadaov)
# Creating linear model and ANOVA test
breadaov = lm(hours~environment*humidity, data = bread); anova(breadaov)
anova(breadaov)$Pr
# Creating linear model and ANOVA test
breadaov = lm(hours~environment*humidity, data = bread)
anova(breadaov)$Pr[3]
# Creating linear model and ANOVA test
breadaov = lm(hours~environment*humidity, data = bread)
anova(breadaov)$Pr[3][0]
# Creating linear model and ANOVA test
breadaov = lm(hours~environment*humidity, data = bread); anova(breadaov)
p_interaction = anova(breadaov)$Pr[3]
# Creating linear model and ANOVA test
breadaov = lm(hours~environment*humidity, data = bread)
anova(breadaov)$Response
p_interaction = anova(breadaov)$Pr[3]
# Creating linear model and ANOVA test
breadaov = lm(hours~environment*humidity, data = bread)
anova(breadaov)
p_interaction = anova(breadaov)$Pr[3]
# Creating linear model and ANOVA test
breadaov = lm(hours~environment*humidity, data = bread)
anova(breadaov)[1]
p_interaction = anova(breadaov)$Pr[3]
# Creating linear model and ANOVA test
breadaov = lm(hours~environment*humidity, data = bread)
anova(breadaov)[1]
p_interaction = anova(breadaov)$Pr[3]
p_interaction[1]
# Creating linear model and ANOVA test
breadaov = lm(hours~environment*humidity, data = bread)
anova(breadaov)[1]
p_interaction = anova(breadaov)$Pr[3]
p_interaction
# Creating linear model and ANOVA test
breadaov = lm(hours~environment*humidity, data = bread)
anova(breadaov)[[1]]
p_interaction = anova(breadaov)$Pr[3]
# Creating linear model and ANOVA test
breadaov = lm(hours~environment*humidity, data = bread)
anova(breadaov)
p_interaction = anova(breadaov)$Pr[3]
knitr::opts_chunk$set(fig.height = 2.5)
options(show.signif.stars=FALSE)
# Creating linear model and ANOVA test
breadaov = lm(hours~environment*humidity, data = bread); anova(breadaov)
p_interaction = anova(breadaov)$Pr[3]
?aes
?ggplot
??ggplot
# Augment the model
model.diag.metrics <- augment(breadaov)
library(tidyverse)
install.packages(c("tidyverse", "broom"))
library(tidyverse)
library(broom)
# Augment the model
model.diag.metrics <- augment(breadaov)
# Plot model and residuals
ggplot(model.diag.metrics, aes(hours, environment*humidity)) +
geom_point() +
stat_smooth(method = lm, se = FALSE) +
geom_segment(aes(xend = environment*humidity, yend = .fitted),
color = "red", size = 0.3)
library(tidyverse)
library(broom)
model <- lm(hours~environment, data = bread)
# Augment the model
model.diag.metrics <- augment(model)
# Plot model and residuals
ggplot(model.diag.metrics, aes(hours, environment)) +
geom_point() +
stat_smooth(method = lm, se = FALSE) +
geom_segment(aes(xend = environment, yend = .fitted),
color = "red", size = 0.3)
breadaov
plot(lm)
library(sjPlot)
library(sjmisc)
library(ggplot2)
qqplot(environment*humidity, hours, data = bread)
qqplot(environment, hours, data = bread)
par(mfrow=c(2, 2))
plot(breadaov)
plot(breadaov)
par(mfrow=c(2, 2))
plot(breadaov)
breadaov
par(mfrow=c(2, 2))
plot(breadaov)
breadaov$coefficients
breadaov$rank
breadaov$residuals
par(mfrow=c(2, 2))
plot(breadaov)
plot(breadaov)
par(mfrow=c(2, 2))
plot(breadaov)
summary(breadaov)
summary(breadaov)$Coefficients
summary(breadaov)
summary(breadaov)[3]
summary(breadaov)
summary(breadaov)[4]
summary(breadaov)[4]
par(mfrow=c(2, 2))
# Plot the linear fitted model graphs
plot(breadaov)
